common_tmp:
  noise_dim: &noise_dim 128

runner_params:
  # input keys
  # Note: for albumentations transforms we have to have key "image" =(
  data_input_key: &real_data "image"
  class_input_key: &class_targets "class_targets"
  noise_input_key: &noise_input "noise"
  # output keys
  fake_logits_output_key: &fake_logits "fake_logits"
  real_logits_output_key: &real_logits "real_logits"
  fake_data_output_key: &fake_data "fake_image"
  # phases
  generator_train_phase: &generator_train_phase generator_train
  discriminator_train_phase: &discriminator_train_phase discriminator_train
  # model keys:
  generator_model_key: &generator_model_name "generator"
  discriminator_model_key: &discriminator_model_name "discriminator"

model_params:
  _key_value: True
  feature_extractor: # todo check if correct
    model: InceptionV3
    output_blocks: [3]
    normalize_input: False
    use_fid_inception: False  # False=debug; True=fair evaluation


args:
  expdir: "gan_example"
  baselogdir: "./logs/debug"


stages:

  data_params:
    num_workers: 0

  state_params:
    num_epochs: 100
    main_metric: "metrics/FID"
    minimize_metric: True
    batch_consistant_metrics: False
    # todo: add somewhere
    memory: {}
    prev_batch_metrics: {}

    valid_loader: "train"

  callbacks_params:

    loss_g:
      _wrapper: &g_train_wrapper
        callback: PhaseBatchWrapperCallback
        active_phases: [*generator_train_phase]
      callback: CriterionCallback
      criterion_key: loss_generator
      input_key: {}
      output_key:
        *fake_logits: fake_logits
      prefix: &loss_g loss_g

    loss_d:
      _wrapper: &d_train_wrapper
        callback: PhaseBatchWrapperCallback
        active_phases: [*discriminator_train_phase]
      callback: CriterionCallback
      criterion_key: loss_discriminator
      input_key: {}
      output_key:
        *real_logits: real_logits
        *fake_logits: fake_logits
      prefix: &loss_d loss_d/full

    optim_g:
      _wrapper: *g_train_wrapper
      callback: OptimizerCallback
      optimizer_key: generator
      loss_key: *loss_g
    optim_d: ## TODO: WGAN clip optimizer?
      _wrapper: *d_train_wrapper
      callback: OptimizerCallback
      optimizer_key: discriminator
      loss_key: *loss_d

    #################################
    # Loss-dependant metrics
    #################################

    # discriminator loss on real data
    loss_d_real:
      _wrapper: *d_train_wrapper
      callback: CriterionCallback
      criterion_key: loss_discriminator_real
      input_key: {}
      output_key:
        *real_logits: real_logits
      prefix: loss_d/real
    # discriminator loss on fake data
    loss_d_fake:
      _wrapper: *d_train_wrapper
      callback: CriterionCallback
      criterion_key: loss_discriminator_fake
      input_key: {}
      output_key:
        *fake_logits: fake_logits
      prefix: loss_d/fake

    ################################
    # Visualization ################
    ################################

    viz:
      callback: ConstNoiseVisualizerCalback
      noise_dim: *noise_dim
      only_valid: False
#    viz2:
#      callback: VisualizationCallback
#      input_keys: *real_data
#      output_keys: *fake_data
#      batch_frequency: 200
#      concat_images: False
#      max_images: 25
#      num_rows: 5

    ######################################
    # Unconditional metrics callbacks: ###
    ######################################
    # TODO (important; low priority; usability) - how to compress this 100 lines to a reasonable amount (ideally single callback)?

    # save generated and real images
    memorizer:
      callback: MemoryAccumulatorCallback
      input_key:
        *real_data: &memory_real_data "real_data"
      output_key:
        *fake_data: &memory_fake_data "fake_data"
      memory_size: 200

    # extract inception features from real data
    feature_extractor_real:
      callback: MemoryFeatureExtractorCallback
      memory_key: *memory_real_data
      model_key: "feature_extractor"
      channels: 3
      layer_key:
        blocks.3: &memory_real_features "real_features"

    # extract inception features from fake data
    feature_extractor_fake:
      callback: MemoryFeatureExtractorCallback
      memory_key: *memory_fake_data
      model_key: "feature_extractor"
      channels: 3
      layer_key:
        blocks.3: &memory_fake_features "fake_features"

    # compute FID
    frechet_inception_distance_conv:
      callback: MemoryMetricCallback
      memory_key:
        *memory_fake_features: samples_a
        *memory_real_features: samples_b
      prefix: "metrics/FID"
      metric: "FrechetInceptionDistance"

    ##############################
    # Metric callbacks [end] #####
    ##############################

  stage1: {}

