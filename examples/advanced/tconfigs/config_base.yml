hparams:
  noise_dim: &noise_dim {{noise_dim or 128}}

runner_params:
  # input keys
  # Note: for albumentations transforms we have to have key "image" =(
  data_input_key: &real_data "image"
  class_input_key: &class_targets "class_targets"
  noise_input_key: &noise_input "noise"
  # output keys
  fake_logits_output_key: &fake_logits "fake_logits"
  real_logits_output_key: &real_logits "real_logits"
  fake_data_output_key: &fake_data "fake_image"
  # phases
  generator_train_phase: &generator_train_phase generator_train
  discriminator_train_phase: &discriminator_train_phase discriminator_train
  # model keys:
  generator_model_key: &generator_model_name "generator"
  discriminator_model_key: &discriminator_model_name "discriminator"

model_params:
  _key_value: True


args:
  expdir: "examples/advanced"
  baselogdir: "./logs/debug"


stages:

  data_params:
    num_workers: 0

  state_params:
    num_epochs: {{ num_epochs or 100 }}
    main_metric: "metrics/FID"
    minimize_metric: True
    batch_consistant_metrics: False
    # todo: add somewhere
    memory: {}
    prev_batch_metrics: {}

  criterion_params:
    _key_value: True
    # criterions
    loss_generator:
      criterion:  # specified in another (loss) config
    loss_discriminator:
      criterion:  # specified in another (loss) config
    # metrics
    loss_discriminator_real:
      criterion:  # specified in another (loss) config
    loss_discriminator_fake:
      criterion:  # specified in another (loss) config
    average_logit:
      criterion: AverageValue
    wasserstein_distance:
      criterion: WassersteinDistance

  callbacks_params:

    loss_g:
      _wrapper: &g_train_wrapper
        callback: PhaseBatchWrapperCallback
        active_phases: [*generator_train_phase]
      callback: CriterionCallback
      criterion_key: loss_generator
      input_key: {}
      output_key:
        *fake_logits: fake_logits
      prefix: &loss_g loss_g

    loss_d:
      _wrapper: &d_train_wrapper
        callback: PhaseBatchWrapperCallback
        active_phases: [*discriminator_train_phase]
      callback: CriterionCallback
      criterion_key: loss_discriminator
      input_key: {}
      output_key:
        *real_logits: real_logits
        *fake_logits: fake_logits
      prefix: &loss_d loss_d/full

    optim_g:
      _wrapper: *g_train_wrapper
      callback: OptimizerCallback
      optimizer_key: generator
      loss_key: *loss_g
    optim_d:
      _wrapper: *d_train_wrapper
      callback: OptimizerCallback
      optimizer_key: discriminator
      loss_key: *loss_d

    ########################################
    # METRICS ##############################
    ########################################

    avg_real_embedding:
      _wrapper: *d_train_wrapper
      callback: CriterionCallback
      criterion_key: "average_logit"
      input_key: {}
      output_key:
        *real_logits: tensor
      prefix: "embedding/real"

    avg_fake_embedding:
      callback: CriterionCallback
      criterion_key: "average_logit"
      input_key: {}
      output_key:
        *fake_logits: tensor
      prefix: "embedding/fake"

    wasserstein_distance:
      _wrapper: *d_train_wrapper
      callback: CriterionCallback
      criterion_key: wasserstein_distance
      input_key: {}
      output_key:
        *real_logits: real_validity
        *fake_logits: fake_validity
      prefix: "wasserstein_distance"

    #################################
    # Loss-dependant metrics
    #################################

    # discriminator loss on real data
    loss_d_real:
      _wrapper: *d_train_wrapper
      callback: CriterionCallback
      criterion_key: loss_discriminator_real
      input_key: {}
      output_key:
        *real_logits: real_logits
      prefix: loss_d/real
    # discriminator loss on fake data
    loss_d_fake:
      _wrapper: *d_train_wrapper
      callback: CriterionCallback
      criterion_key: loss_discriminator_fake
      input_key: {}
      output_key:
        *fake_logits: fake_logits
      prefix: loss_d/fake

    ################################
    # Visualization ################
    ################################

    viz:
      callback: ConstNoiseVisualizerCalback
      noise_dim: *noise_dim
      only_valid: False
#    viz2:
#      callback: VisualizationCallback
#      input_keys: *real_data
#      output_keys: *fake_data
#      batch_frequency: 200
#      concat_images: False
#      max_images: 25
#      num_rows: 5

  stage1: {}

